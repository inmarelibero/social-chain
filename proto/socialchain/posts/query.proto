syntax = "proto3";
package socialchain.posts;

import "amino/amino.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "socialchain/posts/params.proto";
import "socialchain/posts/post.proto";

option go_package = "socialchain/x/posts/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/socialchain/posts/params";
  }

  rpc PostCount(QueryPostCountRequest) returns (QueryPostCountResponse) {
    option (google.api.http).get = "/socialchain/posts/count";
  }

  rpc LatestPosts(QueryLatestPostsRequest) returns (QueryLatestPostsResponse) {
    option (google.api.http).get = "/socialchain/posts/latests";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

message QueryPostCountRequest {
}

message QueryPostCountResponse {
  uint64 count = 1;
}

// Request for querying latest posts
message QueryLatestPostsRequest {
  uint64 from = 1; // id from (mandatory, included)
  uint64 count = 2; // how many results to return
  uint64 handle = 3; // handle to filter (if populated, selects only the Posts created by a specific user)
}

// Response for latest posts
message QueryLatestPostsResponse {
  repeated PostInQuery posts = 1;
  uint64 count = 2; // number of total Posts (coincides with the latest id)
}
