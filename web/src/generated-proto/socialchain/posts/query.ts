// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: socialchain/posts/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Params } from "./params";
import { PostInQuery } from "./post";

export const protobufPackage = "socialchain.posts";

/** QueryParamsRequest is request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}

/** QueryParamsResponse is response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
  /** params holds all the parameters of this module. */
  params: Params | undefined;
}

export interface QueryPostCountRequest {
}

export interface QueryPostCountResponse {
  count: number;
}

/** Request for querying latest posts */
export interface QueryLatestPostsRequest {
  /** id from (mandatory) */
  from: number;
  /** how many results to return */
  count: number;
  /** handle to filter (if populated, selects only the Posts created by a specific user) */
  handle: number;
}

/** Response for latest posts */
export interface QueryLatestPostsResponse {
  posts: PostInQuery[];
  /** number of total Posts (coincides with the latest id) */
  count: number;
}

function createBaseQueryParamsRequest(): QueryParamsRequest {
  return {};
}

export const QueryParamsRequest: MessageFns<QueryParamsRequest> = {
  encode(_: QueryParamsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryParamsRequest {
    return {};
  },

  toJSON(_: QueryParamsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(base?: I): QueryParamsRequest {
    return QueryParamsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(_: I): QueryParamsRequest {
    const message = createBaseQueryParamsRequest();
    return message;
  },
};

function createBaseQueryParamsResponse(): QueryParamsResponse {
  return { params: undefined };
}

export const QueryParamsResponse: MessageFns<QueryParamsResponse> = {
  encode(message: QueryParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryParamsResponse {
    return { params: isSet(object.params) ? Params.fromJSON(object.params) : undefined };
  },

  toJSON(message: QueryParamsResponse): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(base?: I): QueryParamsResponse {
    return QueryParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(object: I): QueryParamsResponse {
    const message = createBaseQueryParamsResponse();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseQueryPostCountRequest(): QueryPostCountRequest {
  return {};
}

export const QueryPostCountRequest: MessageFns<QueryPostCountRequest> = {
  encode(_: QueryPostCountRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryPostCountRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPostCountRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryPostCountRequest {
    return {};
  },

  toJSON(_: QueryPostCountRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryPostCountRequest>, I>>(base?: I): QueryPostCountRequest {
    return QueryPostCountRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryPostCountRequest>, I>>(_: I): QueryPostCountRequest {
    const message = createBaseQueryPostCountRequest();
    return message;
  },
};

function createBaseQueryPostCountResponse(): QueryPostCountResponse {
  return { count: 0 };
}

export const QueryPostCountResponse: MessageFns<QueryPostCountResponse> = {
  encode(message: QueryPostCountResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.count !== 0) {
      writer.uint32(8).uint64(message.count);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryPostCountResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPostCountResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.count = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryPostCountResponse {
    return { count: isSet(object.count) ? globalThis.Number(object.count) : 0 };
  },

  toJSON(message: QueryPostCountResponse): unknown {
    const obj: any = {};
    if (message.count !== 0) {
      obj.count = Math.round(message.count);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryPostCountResponse>, I>>(base?: I): QueryPostCountResponse {
    return QueryPostCountResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryPostCountResponse>, I>>(object: I): QueryPostCountResponse {
    const message = createBaseQueryPostCountResponse();
    message.count = object.count ?? 0;
    return message;
  },
};

function createBaseQueryLatestPostsRequest(): QueryLatestPostsRequest {
  return { from: 0, count: 0, handle: 0 };
}

export const QueryLatestPostsRequest: MessageFns<QueryLatestPostsRequest> = {
  encode(message: QueryLatestPostsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.from !== 0) {
      writer.uint32(8).uint64(message.from);
    }
    if (message.count !== 0) {
      writer.uint32(16).uint64(message.count);
    }
    if (message.handle !== 0) {
      writer.uint32(24).uint64(message.handle);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryLatestPostsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryLatestPostsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.from = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.count = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.handle = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryLatestPostsRequest {
    return {
      from: isSet(object.from) ? globalThis.Number(object.from) : 0,
      count: isSet(object.count) ? globalThis.Number(object.count) : 0,
      handle: isSet(object.handle) ? globalThis.Number(object.handle) : 0,
    };
  },

  toJSON(message: QueryLatestPostsRequest): unknown {
    const obj: any = {};
    if (message.from !== 0) {
      obj.from = Math.round(message.from);
    }
    if (message.count !== 0) {
      obj.count = Math.round(message.count);
    }
    if (message.handle !== 0) {
      obj.handle = Math.round(message.handle);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryLatestPostsRequest>, I>>(base?: I): QueryLatestPostsRequest {
    return QueryLatestPostsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryLatestPostsRequest>, I>>(object: I): QueryLatestPostsRequest {
    const message = createBaseQueryLatestPostsRequest();
    message.from = object.from ?? 0;
    message.count = object.count ?? 0;
    message.handle = object.handle ?? 0;
    return message;
  },
};

function createBaseQueryLatestPostsResponse(): QueryLatestPostsResponse {
  return { posts: [], count: 0 };
}

export const QueryLatestPostsResponse: MessageFns<QueryLatestPostsResponse> = {
  encode(message: QueryLatestPostsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.posts) {
      PostInQuery.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.count !== 0) {
      writer.uint32(16).uint64(message.count);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryLatestPostsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryLatestPostsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.posts.push(PostInQuery.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.count = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryLatestPostsResponse {
    return {
      posts: globalThis.Array.isArray(object?.posts) ? object.posts.map((e: any) => PostInQuery.fromJSON(e)) : [],
      count: isSet(object.count) ? globalThis.Number(object.count) : 0,
    };
  },

  toJSON(message: QueryLatestPostsResponse): unknown {
    const obj: any = {};
    if (message.posts?.length) {
      obj.posts = message.posts.map((e) => PostInQuery.toJSON(e));
    }
    if (message.count !== 0) {
      obj.count = Math.round(message.count);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryLatestPostsResponse>, I>>(base?: I): QueryLatestPostsResponse {
    return QueryLatestPostsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryLatestPostsResponse>, I>>(object: I): QueryLatestPostsResponse {
    const message = createBaseQueryLatestPostsResponse();
    message.posts = object.posts?.map((e) => PostInQuery.fromPartial(e)) || [];
    message.count = object.count ?? 0;
    return message;
  },
};

/** Query defines the gRPC querier service. */
export interface Query {
  /** Parameters queries the parameters of the module. */
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
  PostCount(request: QueryPostCountRequest): Promise<QueryPostCountResponse>;
  LatestPosts(request: QueryLatestPostsRequest): Promise<QueryLatestPostsResponse>;
}

export const QueryServiceName = "socialchain.posts.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.Params = this.Params.bind(this);
    this.PostCount = this.PostCount.bind(this);
    this.LatestPosts = this.LatestPosts.bind(this);
  }
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse> {
    const data = QueryParamsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Params", data);
    return promise.then((data) => QueryParamsResponse.decode(new BinaryReader(data)));
  }

  PostCount(request: QueryPostCountRequest): Promise<QueryPostCountResponse> {
    const data = QueryPostCountRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "PostCount", data);
    return promise.then((data) => QueryPostCountResponse.decode(new BinaryReader(data)));
  }

  LatestPosts(request: QueryLatestPostsRequest): Promise<QueryLatestPostsResponse> {
    const data = QueryLatestPostsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "LatestPosts", data);
    return promise.then((data) => QueryLatestPostsResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
